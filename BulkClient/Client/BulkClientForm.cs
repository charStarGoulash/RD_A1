///
/// FILE : BulkClientForm1
/// PROJECT : PROG2110 - Assignment #1
/// PROGRAMMER : Attila Katona & Trevor Allain
/// FIRST VERSION : 2018-09-22
/// DESCRIPTION : This is the Form for the bulk client. This program will ask the user for an IP address and
///               a port number. It will then generate 40 000 random strings containing a First name, Last name and
///               a date of birth. The string will begin with B* to indicate the infomation is coming from the bulk client.
///               The client will connect to the "server" using the input IP address and port. It will then populate the feed
///               in this format : B*FirstName*LastName*DOB (YEAR-MONTH-DAY).
///

//Below are the using conditions
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using System.Threading;

namespace Client
{
    public partial class BulkClientForm : Form
    {
        //Below are the variables used in this program
        public static Random r = new Random();
        public static Random randomNum = new Random();
        /// <summary>
        /// Keeps the server IP
        /// </summary>
        string serverIP;
        /// <summary>
        /// Keeps the port number
        /// </summary>
        int port;
        /// <summary>
        /// Regex to ensure proper IP address has been entered
        /// </summary>
        Regex ipChecker = new Regex(@"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$");
        /// <summary>
        /// Used for recieving true or false after converting port entered by user into an integer
        /// </summary>
        bool portChecker;
        /// <summary>
        /// Keeps track of the byte count to ensure the program is either reading or writing bytes
        /// </summary>
        int byteCount;
        /// <summary>
        /// Used to hold the message that will be sent to server
        /// </summary>
        byte[] sendMsg;
        int x;
        //Below are the network connecton variables used in the program
        /// <summary>
        /// Used to connect to the TCPIP address
        /// </summary>
        TcpClient client;
        /// <summary>
        /// Holds the stream used to read and write messaages to the server
        /// </summary>
        NetworkStream outgoingStream;
        /// <summary>
        /// Used to check for errors
        /// </summary>
        bool errorCheck = false;
        //Below are the static varibales used by the name Generator
        public static int year;
        public static int month;
        public static int day;
        public static int realDay;
        public static DateTime dt;
        /// <summary>
        /// Creates the actual client
        /// </summary>
        public BulkClientForm()
        {
            InitializeComponent();
        }
        /// <summary>
        /// Validates the users input for IP address and Port. Sends 40000 messages of user data to server
        /// </summary>
        /// <param name="e">It is the event arguement generated by VS 2017</param>
        /// <param name="sender">Object that is also generated by VS 2017</param>
        private void button1_Click(object sender, EventArgs e)
        {           
            serverIP = ipBox.Text;
            portChecker = Int32.TryParse(portBox.Text, out port);//Converting an string into int
            string temp = "";

            if (!ipChecker.IsMatch(serverIP))//Checking if IP address is proper
            {
                MessageBox.Show("Please enter a valid IP address!");
            }
            else if (!portChecker || portBox.Text == "")//Checking is Port is proper
            {
                MessageBox.Show("Please enter a valid port number!");
            }
            else
            {
                try
                {
                    client = new TcpClient(serverIP, port);
                    client.NoDelay = true;
                    outgoingStream = client.GetStream();
                }
                catch (Exception Q)
                {
                    MessageBox.Show("Could not connect. Ensure IP address and Port are right");
                    errorCheck = true;
                }
                if (!errorCheck)
                {
                    for (x = 0; x <= 40000; x++)
                    {
                        temp = GenerateName();
                        byteCount = Encoding.ASCII.GetByteCount(temp + 1);
                        sendMsg = new byte[byteCount];

                        sendMsg = Encoding.ASCII.GetBytes("B*" + temp + ";");

                        outgoingStream.Write(sendMsg, 0, sendMsg.Length);
                        sendMsg = null;

                        outgoingStream.Flush();
                        byteCount = 0;
                        byte[] messageBuffer = new byte[100];
                        byteCount = outgoingStream.Read(messageBuffer, 0, messageBuffer.Length);
                        string ServerMessage = Encoding.ASCII.GetString(messageBuffer, 0, byteCount);
                        byteCount = 0;
                        if (ServerMessage == "FF")
                        {
                            MessageBox.Show("DATABASE FULL");
                            break;
                        }
                    }
                    outgoingStream.Close();
                    client.Close();
                }
            }
            if (x == 0 && !errorCheck)
            {
                MessageBox.Show("You have sent " + x + " messages");
            }
            else if (!errorCheck)
            {
                MessageBox.Show("You have sent " + (x - 1) + " messages");
            }
        
            x = 0;
        }
        /// <summary>
        /// Generates a random First name, Last name and date of birth
        /// </summary>
        /// <returns>A string in the format FirstName*LastName*DOB</returns>
        public static string GenerateName()
        {
            string[] consonants = { "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "l", "n", "p", "q", "r", "s", "sh", "zh", "t", "v", "w", "x" };
            string[] vowels = { "a", "e", "i", "o", "u", "ae", "y" };
            string userInfo = "";
            int randomNumber = randomNum.Next(0, 9);
            userInfo += consonants[r.Next(consonants.Length)].ToUpper();
            userInfo += vowels[r.Next(vowels.Length)];
            /// <summary>
            /// b tells how many times a new letter has been added. It's 2 right now because the first two letters are already in the name.
            /// </summary>
            int b = 2; 
            while (b < randomNumber)
            {
                userInfo += consonants[r.Next(consonants.Length)];
                b++;
                userInfo += vowels[r.Next(vowels.Length)];
                b++;
            }

            userInfo += "*";
            randomNumber = randomNum.Next(0, 9);
            userInfo += consonants[r.Next(consonants.Length)].ToUpper();
            userInfo += vowels[r.Next(vowels.Length)];

            while (b < randomNumber)
            {
                userInfo += consonants[r.Next(consonants.Length)];
                b++;
                userInfo += vowels[r.Next(vowels.Length)];
                b++;
            }

            userInfo += "*";

            year = randomNum.Next(1900, 2018);
            month = randomNum.Next(1, 12);
            day = DateTime.DaysInMonth(year, month);

            realDay = randomNum.Next(1, day);

            dt = new DateTime(year, month, realDay);

            userInfo += dt.ToString("d");
            return userInfo;
        }
    }
}

