///
/// FILE : iClientForm
/// PROJECT : PROG2110 - Assignment #1
/// PROGRAMMER : Attila Katona & Trevor Allain
/// FIRST VERSION : 2018-09-22
/// DESCRIPTION : This is the Form for the interactive client. The program will ask the user for an IP address and
///               a port number. It will then connect to the server and ask the user to input a ID number and click find.
///               The server will find or not find the information using the ID and infrom the user. The client will populate
///               the data fields and the user can choose to update the fields or delete them all together. 
///

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
using System.Windows.Forms;
using System.Text.RegularExpressions;

/// <summary>
/// Client Name Space
/// Holds the methods to run the iclient
/// </summary>
namespace Client
{   /// <summary>
    /// iClient Form
    /// </summary>
    public partial class iClientForm : Form
    {
        /// <summary>
        /// Keeps the server IP
        /// </summary>
        string serverIP = "";
        /// <summary>
        /// Keeps the port number
        /// </summary>
        int port;
        /// <summary>
        /// Used to connect to the TCPIP address
        /// </summary>
        TcpClient client = null;
        /// <summary>
        /// Used to check if there has been a connection
        /// </summary>
        int connectFlag = 0;
        /// <summary>
        /// Used for recieving true or false after converting port entered by user into an integer
        /// </summary>
        bool portChecker;
        /// <summary>
        /// Used to check for errors
        /// </summary>
        int errorChecker = 0;
        /// <summary>
        /// Used for recieving messages into a buffer
        /// </summary>
        byte[] messageRecBuffer;
        /// <summary>
        /// Another buffer used for a message, double buffer for speed
        /// </summary>
        byte[] messageBuffer;
        /// <summary>
        /// Used to store the new message that user updated
        /// </summary>
        string updatedMessage;
        /// <summary>
        /// Used to make sure there has been bytes actually read
        /// </summary>
        int bytesRead;
        /// <summary>
        /// Keeps track of the byte count to ensure the program is either reading or writing bytes
        /// </summary>
        int byteCount;
        /// <summary>
        /// Hold the integer value of the memberID 
        /// </summary>
        int intVal;
        /// <summary>
        /// Used to check before giving a final warning before deleting
        /// </summary>
        int finalWarning = 0;
        /// <summary>
        /// Used to keep the users data after parsed from server
        /// </summary>
        string[] data;
        /// <summary>
        /// The message delimiters used for parsing
        /// </summary>
        string[] seperatingChars = { "ID: ", " found!\n", "First: ", "Last: ", "DOB: ", "\n" , ";" };
        /// <summary>
        /// Used to hold the message from the server
        /// </summary>
        string readBuffer = "";
        /// <summary>
        /// Used to hold the first name of member
        /// </summary>
        string firstName;
        /// <summary>
        /// Used to hold the last name of member
        /// </summary>
        string lastName;
        /// <summary>
        /// Used to hold the date of birth of member
        /// </summary>
        string dob;
        /// <summary>
        /// Used to hold the ID of member
        /// </summary>
        string memberID;
        /// <summary>
        /// Holds the stream used to read and write messaages to the server
        /// </summary>
        NetworkStream streamToServer;

        /// <summary>
        /// Creates the actual client form
        /// </summary>
        public iClientForm()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Validates the users input for IP address and Port. Will hide the text and label boxes and show the
        /// memberID label and boxes
        /// </summary>
        /// <param name="e">It is the event arguement generated by VS 2017</param>
        /// <param name="sender">Object that is also generated by VS 2017</param>
        private void button1_Click_1(object sender, EventArgs e)
        {
            serverIP = ipText.Text;
            errorChecker = 0;
            /// <summary>
            /// Holds the regex pattern to ensure the IP is correct
            /// </summary>
            Regex expression = new Regex(@"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$");
            portChecker = Int32.TryParse(portBox.Text, out port);//Converting an string into int

            //Checking if the entered information is proper
            if (expression.IsMatch(serverIP) && portChecker && portBox.Text != "")
            {
                IPLabel.Text = "IP: " + serverIP;
                ipText.Text = String.Empty;
                portLabel.Text = "Port: " + port;
                portBox.Text = String.Empty;

                client = new TcpClient();
                //connect to server
                try
                {
                    client.Connect(serverIP, port);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Cannot connect to server! Check IP and Port");
                    IDBOX.Text = String.Empty;
                    errorChecker = 1;
                }
                finally
                {
                    connectFlag = 1;
                }
                if (errorChecker == 0)
                {
                    //Below I am hiding the IP address and port number boxes
                    portBox.Visible = false;
                    ipText.Visible = false;
                    ipSubmit.Visible = false;
                    label3.Visible = false;
                    label4.Visible = false;
                    //Below I am showing the member ID box
                    memberIDLabel.Visible = true;
                    IDBOX.Visible = true;
                    FindButton.Visible = true;
                }
            }
            else if (!portChecker || portBox.Text == "")//Checking is Port is proper
            {
                MessageBox.Show("Please enter a valid port number!");
                portBox.Text = String.Empty;
            }
            else if (!expression.IsMatch(serverIP))//Checking is Ip is proper
            {
                MessageBox.Show("Sorry, IP Address is not correct format!");
                ipText.Text = String.Empty;
            }
            client.Close();
        }

        /// <summary>
        /// The FIND user button. Will send memberID to the server and recieve the members data if found. It will then
        /// populate the first name, last name and date of birth field text and label boxes. It will Show the Update and 
        /// Delete buttons.
        /// </summary>
        /// <param name="e">It is the event arguement generated by VS 2017</param>
        /// <param name="sender">Object that is also generated by VS 2017</param>
        private void button1_Click(object sender, EventArgs e)
        {
            client = new TcpClient();
            try
            {
                client.Connect(serverIP, port);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString() + "\nCannot connect to server! Check IP and Port");
                IDBOX.Text = String.Empty;
                errorChecker = 1;
            }
            if (client.Connected && client != null)
            {
                string checkString = IDBOX.Text;
                intVal = 0;

                //check for only ID as integer
                if (int.TryParse(checkString, out intVal))
                {
                    
                    if (intVal > 0 || intVal <= 40000)
                    {
                        //text to send from box
                        byteCount = Encoding.ASCII.GetByteCount(IDBOX.Text + 1);

                        //send message
                        try
                        {
                            messageBuffer = new byte[byteCount];
                            messageBuffer = Encoding.ASCII.GetBytes("1*" + IDBOX.Text);
                            streamToServer = client.GetStream();
                            streamToServer.Write(messageBuffer, 0, messageBuffer.Length);
                          
                            memberID = IDBOX.Text;                 
                        }
                        catch (Exception excep)
                        {
                            MessageBox.Show("ERROR: " + excep.ToString());
                        }
                        
                        //read message from server
                        messageRecBuffer = new byte[500];
                        
                        bytesRead = streamToServer.Read(messageRecBuffer, 0, messageRecBuffer.Length);
                        
                        readBuffer = Encoding.ASCII.GetString(messageRecBuffer, 0, bytesRead);

                        int starCount = readBuffer.Count(total => total == '*');

                        //Below I am parsing the message recieved from the server with the First,Last and DOB data
                        data = readBuffer.Split(seperatingChars, System.StringSplitOptions.RemoveEmptyEntries);



                        if (readBuffer.Contains(seperatingChars[0]) && readBuffer.Contains(seperatingChars[1]) && readBuffer.Contains(seperatingChars[2]) 
                            && readBuffer.Contains(seperatingChars[3]) && readBuffer.Contains(seperatingChars[4]) && readBuffer.Contains(seperatingChars[5]))
                        {
                            //Below I am making everything to do with member data boxes visible
                            FirstNameLabel.Visible = true;
                            FirstNameBox.Visible = true;
                            LastNameLabel.Visible = true;
                            LastNameBox.Visible = true;
                            DOBLabel.Visible = true;
                            dobBox.Visible = true;
                            UpdateButton.Visible = true;
                            DeleteButton.Visible = true;                          
                            
                            firstName = data[1];
                            lastName = data[2];
                            dob = data[3];

                            //Below I am populating the text boxes with the appropriate information
                            FirstNameBox.Text = firstName;
                            LastNameBox.Text = lastName;
                            dobBox.Text = dob;
                        }
                        else
                        {
                            MessageBox.Show(readBuffer);
                        }
                        streamToServer.Close();
                    }
                    else
                    {
                        MessageBox.Show("Error: Please enter an ID value between 1 and 40,000!");
                    }             
                                     
                }
                else
                {
                    MessageBox.Show("Error: please only enter a number for searching!");
                }
                IDBOX.Text = String.Empty;
            }
            else
            {
                MessageBox.Show("Couldnt Connect! Restart Program");
            }
            client.Close();
        }
        /// <summary>
        /// The UPDATE user button will check to ensure that something was changed. If the user changed any of the fields
        /// the program will take that info and generate a string with the new information added to it. It will then send
        /// the string to the server to parse and update the database.
        /// </summary>
        /// <param name="e">It is the event arguement generated by VS 2017</param>
        /// <param name="sender">Object that is also generated by VS 2017</param>
        private void UpdateButton_Click(object sender, EventArgs e)
        {
            errorChecker = 0;
            /// <summary>
            /// Holds the regex to ensure the date of birth is in correct format
            /// </summary>
            Regex dobCheck = new Regex (@"(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$");
            Regex nameCheck = new Regex(@"^[a-zA-Z]+$");
            client = new TcpClient();
            try
            {
                client.Connect(serverIP, port);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Cannot connect to server! Check IP and Port");
                IDBOX.Text = String.Empty;
                errorChecker = 1;
            }

            if (FirstNameBox.Text == firstName && LastNameBox.Text == lastName && dobBox.Text == dob)
            {
                MessageBox.Show("Nothing to update!");
            }
            else
            {
                if (FirstNameBox.Text != firstName)
                {
                    if (nameCheck.IsMatch(FirstNameBox.Text))
                    {
                        firstName = FirstNameBox.Text;
                    }
                    else
                    {
                        MessageBox.Show("Name can only be letters");
                        errorChecker = 1;
                    }
                }

                if (LastNameBox.Text != lastName)
                {
                    if (nameCheck.IsMatch(LastNameBox.Text))
                    {
                        lastName = LastNameBox.Text;
                    }
                    else
                    {
                        MessageBox.Show("Name can only be letters");
                        errorChecker = 1;
                    }
                }

                if (dobBox.Text != dob)
                {
                    if (dobCheck.IsMatch(dobBox.Text))
                    {
                        dob = dobBox.Text;
                    }
                    else
                    {
                        MessageBox.Show("Date Of Birth is not right format. Please rewrite in DD/MM/YYYY format.");
                        errorChecker = 1;
                    }
                }
            }
            //Below I am connecting to the server, populating the string with the new updated informaton and sending it to thr server
            if (client.Connected && client != null && errorChecker == 0)
            {
                updatedMessage = "U*" + memberID + "*" + firstName + "*" + lastName + "*" + dob;
                byteCount = Encoding.ASCII.GetByteCount(updatedMessage + 1);
                streamToServer = client.GetStream();

                //send message
                try
                {
                    messageBuffer = new byte[byteCount];
                    messageBuffer = Encoding.ASCII.GetBytes(updatedMessage);
                    streamToServer.Write(messageBuffer, 0, messageBuffer.Length);
                    
                }
                catch (Exception excep)
                {
                    MessageBox.Show("ERROR: " + excep.ToString());
                }

                //receive server success or fail to update message
                try
                {
                    //read message from server
                    messageRecBuffer = new byte[500];

                    bytesRead = streamToServer.Read(messageRecBuffer, 0, messageRecBuffer.Length);
                    streamToServer.Close();
                    readBuffer = Encoding.ASCII.GetString(messageRecBuffer, 0, bytesRead);
                    MessageBox.Show(readBuffer);
                }
                catch (Exception readError)
                {
                    MessageBox.Show("ERROR: " + readError.ToString());
                }
                streamToServer.Close();
            }
            client.Close();
        }
        /// <summary>
        /// The EXIT button will close all opened streams and exit the program.
        /// </summary>
        /// <param name="e">It is the event arguement generated by VS 2017</param>
        /// <param name="sender">Object that is also generated by VS 2017</param>
        private void exitButton_Click(object sender, EventArgs e)
        {
            if(client != null && streamToServer != null) 
            {
                client.Close();
                streamToServer.Close();
                this.Close();
            }
            else
            {
                this.Close();
            }      
        }
        /// <summary>
        /// The DELETE button will send a message containg the memberID and a delete flag to the server.
        /// </summary>
        /// <param name="e">It is the event arguement generated by VS 2017</param>
        /// <param name="sender">Object that is also generated by VS 2017</param>
        private void DeleteButton_Click(object sender, EventArgs e)
        {
            client = new TcpClient();
            try
            {
                client.Connect(serverIP, port);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString() + "\nCannot connect to server! Check IP and Port");
                IDBOX.Text = String.Empty;
                errorChecker = 1;
            }
            if (client.Connected && client != null)
            {

                DialogResult dialogResult = MessageBox.Show("Are you sure you want to delete this entry?", "Confirm Delete", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    updatedMessage = "D*" + memberID;
                    byteCount = Encoding.ASCII.GetByteCount(updatedMessage + 1);
                    streamToServer = client.GetStream();

                    //send message
                    try
                    {
                        messageBuffer = new byte[byteCount];
                        messageBuffer = Encoding.ASCII.GetBytes(updatedMessage);
                        streamToServer.Write(messageBuffer, 0, messageBuffer.Length);

                    }
                    catch (Exception excep)
                    {
                        MessageBox.Show("ERROR: " + excep.ToString());
                    }

                    //receive server success or fail to update message
                    try
                    {
                        //read message from server
                        messageRecBuffer = new byte[500];

                        bytesRead = streamToServer.Read(messageRecBuffer, 0, messageRecBuffer.Length);
                        streamToServer.Close();
                        readBuffer = Encoding.ASCII.GetString(messageRecBuffer, 0, bytesRead);
                        MessageBox.Show(readBuffer);
                    }
                    catch (Exception readError)
                    {
                        MessageBox.Show("ERROR: " + readError.ToString());
                    }
                    
                    streamToServer.Close();
                }
                else if (dialogResult == DialogResult.No)
                {
                    MessageBox.Show("Delete has be aborted");
                }
            }            
            client.Close();
        }
    }// End of public partial class iClientForm : Form
}// End of namespace Client
